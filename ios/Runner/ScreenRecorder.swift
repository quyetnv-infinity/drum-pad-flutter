import ReplayKit
import AVFoundation
import Photos

class ScreenRecordHandler: RPBroadcastSampleHandler {
    static let shared = ScreenRecordHandler()
    
    var assetWriter: AVAssetWriter?
    var videoWriterInput: AVAssetWriterInput?
    var audioWriterInput: AVAssetWriterInput?
    var outputURL: URL?

    override func broadcastStarted(withSetupInfo setupInfo: [String : NSObject]?) {
        print("‚úÖ B·∫Øt ƒë·∫ßu quay m√†n h√¨nh + ghi √¢m thanh h·ªá th·ªëng")

        // üîπ T·∫°o ƒë∆∞·ªùng d·∫´n file .mp4
        let fileName = "screen_recording_\(UUID().uuidString).mp4"
        let outputPath = NSTemporaryDirectory().appending(fileName)
        outputURL = URL(fileURLWithPath: outputPath)

        do {
            assetWriter = try AVAssetWriter(outputURL: outputURL!, fileType: .mp4)

            // üîπ C·∫•u h√¨nh video
            let videoSettings: [String: Any] = [
                AVVideoCodecKey: AVVideoCodecType.h264,
                AVVideoWidthKey: 1080,
                AVVideoHeightKey: 1920
            ]
            videoWriterInput = AVAssetWriterInput(mediaType: .video, outputSettings: videoSettings)
            videoWriterInput?.expectsMediaDataInRealTime = true

            // üîπ C·∫•u h√¨nh audio (ch·ªâ ghi √¢m thanh h·ªá th·ªëng, kh√¥ng micro)
            let audioSettings: [String: Any] = [
                AVFormatIDKey: kAudioFormatMPEG4AAC,
                AVNumberOfChannelsKey: 2,
                AVSampleRateKey: 44100,
                AVEncoderBitRateKey: 128000
            ]
            audioWriterInput = AVAssetWriterInput(mediaType: .audio, outputSettings: audioSettings)
            audioWriterInput?.expectsMediaDataInRealTime = true

            if let writer = assetWriter {
                if let vInput = videoWriterInput, writer.canAdd(vInput) {
                    writer.add(vInput)
                }
                if let aInput = audioWriterInput, writer.canAdd(aInput) {
                    writer.add(aInput)
                }
                writer.startWriting()
                writer.startSession(atSourceTime: .zero)
                print("‚úÖ B·∫Øt ƒë·∫ßu ghi...")
            }
        } catch {
            print("‚ùå L·ªói khi t·∫°o AVAssetWriter: \(error.localizedDescription)")
        }
    }

    override func broadcastFinished() {
        print("‚úÖ D·ª´ng quay m√†n h√¨nh")

        videoWriterInput?.markAsFinished()
        audioWriterInput?.markAsFinished()
        assetWriter?.finishWriting {
            if let savedURL = self.outputURL {
                print("‚úÖ Video ƒë√£ l∆∞u t·∫°i: \(savedURL.path)")
                self.saveToPhotos(videoURL: savedURL)
            }
        }
    }

    override func processSampleBuffer(_ sampleBuffer: CMSampleBuffer, with sampleBufferType: RPSampleBufferType) {
        switch sampleBufferType {
        case .video:
            if videoWriterInput?.isReadyForMoreMediaData == true {
                videoWriterInput?.append(sampleBuffer)
            }
        case .audioApp: // Ghi √¢m thanh h·ªá th·ªëng
            if audioWriterInput?.isReadyForMoreMediaData == true {
                audioWriterInput?.append(sampleBuffer)
            }
        default:
            break
        }
    }

    // üîπ L∆∞u video v√†o th∆∞ vi·ªán Photos
    func saveToPhotos(videoURL: URL) {
        PHPhotoLibrary.requestAuthorization { status in
            if status == .authorized {
                PHPhotoLibrary.shared().performChanges({
                    PHAssetChangeRequest.creationRequestForAssetFromVideo(atFileURL: videoURL)
                }) { success, error in
                    if success {
                        print("‚úÖ Video ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o Photos")
                    } else if let error = error {
                        print("‚ùå L·ªói khi l∆∞u video: \(error.localizedDescription)")
                    }
                }
            } else {
                print("‚ùå Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p Photos")
            }
        }
    }
}
